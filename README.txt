Структура и требования
    Подробнее в гугле: язык gherkin
    Файл должен иметь расширение .feature и находиться в папке Features
    Первой строкой файла должна быть: #language: ru
    Файл начинается с названия фичи (Функционал: ...)
    Фича содержит сценарии, которые и являются тестами (Сценарий: ...)
    Сценарий содержит шаги, начинающиеся со слов Дано (предусловие), Когда (действия), Тогда (результат), И (дополнительные шаги в рамках одного этапа - любого из предыдущих)
    Файл со сценариями должен иметь кодировку UTF-8

Запуск тестов
    mvn clean install -Dcucumber.options="--tags @all_steps_touch_rus_example --tags ~@ignored"
    Если необходимо, можно проверить:
        Теоретически, можно хранить папку с тестами на общей шаре, чтобы не перебрасывать их между машинами по мере создания тестов.
        Для этого нужно в src\test\java\siriustest\run\RunnerTest.java изменить значение features:
            features = "\\1.1.1.1\Features"

Отчеты
    1. Кратко, понятно, с результатами шагов:
    	target/reports-pretty/index.html
    Примечание: при при каждом запуске тестов этот отчет перезатирается

    2. Красиво, с крутыми графиками и процентными показателями:
    	Reports/.../cucumber-html-reports/overview-features.html
    Примечание: ну очень крутой отчет :)

Теги
    Тесты нужно помечать тегами, их может быть несколько. При этом можно помечать тегами как фичи так и отдельные сценарии в них.
    Предлагаемые теги:
    	@alltests - все тесты
    	@smoketests - смоуки
    	@newtests - используется для запуска тестов в целях проверки (или отладки)
    	@ignored - при наличии этого тега фича не будет запущена
    Пример 1: фича помечена тегами @alltests и @ignored - при запуске всех тестов (тег @alltests) эта фича не будет запущена.
    Пример 2: фича помечена тегом @alltests, но один сценарий в ней - тегом @ignored. В этом случае будут выполнены все сценарии кроме него.
    Пример 3: отдельный сценарий внутри фичи помечен тегом @test, при исполнении команды mvn clean install -Dcucumber.options="--tags @test" будет выполнен только один сценарий. По существу, эта роль отводится тегу @newtests.
    Теги можно создавать самостоятельно, даже указанные выше теги не являются обязательными, но для порядка лучше всего придерживаться единой системы обозначений.

Тесты с набором параметров:
    Тест начинается не со слова "Сценарий: ...", как обычно, а с "Структура сценария: ..."
    Параметры должны быть заключены в кавычки и угловые скобки.

Шаги:
    В настоящий момент можно использовать следующие шаги (в независимости от этапа Дано/Когда/Тогда/И):
        страница 'Платежи и переводы' открыта
        страница 'Главный экран' открыта
        элемент "<element_type>" с текстом \"([^\"]*)\" должен быть отображен
        элемент "<element_type>" с текстом \"([^\"]*)\" должен быть отображен на странице 'ОК'
        элемент "<element_type>" с текстом \"([^\"]*)\" должен быть отображен на странице 'Ошибка'
        элемент "<text_left>" с текстом "<text_right>" должен быть отображен на странице 'Итого'
        элемент с текстом "<element_text>" должен быть отображен
        элемент с текстом "<element_text>" не должен быть отображен
        элемент 'notes' с текстом "<element_text>" должен быть отображен
        элемент 'поле региона' с текстом "<element_text>" должен быть отображен
        элемент 'support' с текстом ""<element_text>" должен быть отображен
        элемент 'экран ожидания' должен быть отображен
        элемент 'помощь' с текстом "<element_text>" должен быть отображен
        элемент прокрутки страницы должен быть отображен
        шаблон "<template_name>" должен быть отображен
        приветствие "<element_text>" должно быть отображено
        пользователь нажимает кнопку "<button_text>"
        пользователь нажимает кнопку 'Домой'
        пользователь нажимает кнопку 'Помощь'
        пользователь нажимает кнопку "<button_text>" на чеке
        пользователь нажимает кнопку 'прокрутка календаря назад
        пользователь нажимает кнопку 'прокрутка календаря вперед'
        пользователь прокручивает страницу вниз "<number>" раз
        пользователь прокручивает страницу вверх "<number>" раз
        пользователь вводит "<text>"
        пользователь нажимает кнопку 'Backspace' "<number>" раз
        пользователь ожидает "<number>" секунд
        в серверном логе должна присутствовать строка "<text>"
        в клиентском логе должна присутствовать строка "<text>"
        клавиатура должна быть отображена
        чек должен быть отображен
        на чеке должна быть отображена строка "<text>"

        * Пробелы игнорируются
        * Кавычки " " обязательны в шаге, а угловые скобки < > - описывают переменную.
          В шагах, где присутствуют кавычки одиночные ' ' без угловых скобок < > не допускаются другие переменные, например:
              пользователь нажимает кнопку "<button_name>" - означает, что можно ввести название кнопки самостоятельно: пользователь нажимает кнопку "Платежи"
              пользователь нажимает кнопку 'Домой' - означает, что этот шаг не использует переменные, это просто нажатие кнопки "Домой"
          Эти нюансы связаны с неудобными названиями элементов в коде страницы или с отсутствием явной надписи на кнопке, как в случае с "домиком",
          для таких элементов пришлось создать отдельные шаги.

 Начало шагов на русском:
    	  "name": "Russian",
    	  "native": "русский",
    	  "feature": "Функция|Функционал|Свойство",
    	  "background": "Предыстория|Контекст",
    	  "scenario": "Сценарий",
    	  "scenario_outline": "Структура сценария",
    	  "examples": "Примеры",
    	  "given": "*|Допустим|Дано|Пусть",
    	  "when": "*|Если|Когда",
    	  "then": "*|То|Тогда",
    	  "and": "*|И|К тому же|Также",
    	  "but": "*|Но|А"